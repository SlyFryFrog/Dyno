cmake_minimum_required(VERSION 3.28)
project(Sandbox LANGUAGES CXX)

#################################
# Set constants for the project #
#################################

file(GLOB_RECURSE SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
)

file(GLOB_RECURSE MODULES
        ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cppm
)

######################
# Target: executable #
######################

add_executable(${PROJECT_NAME} ${SOURCES})

if (MODULES)
    target_sources(${PROJECT_NAME}
            PUBLIC
            FILE_SET allModules
            TYPE CXX_MODULES
            FILES ${MODULES}
    )
endif()

target_link_libraries(${PROJECT_NAME}
        PRIVATE
        JlCxx::cxxwrap_julia
        JlCxx::cxxwrap_julia_stl
        Julia::julia
        Dyno
)

# Since <ranges> isn't fully supported on Apple, we disable it
if (APPLE)
    target_compile_definitions(${PROJECT_NAME} PRIVATE JLCXX_FORCE_RANGES_OFF=1)
endif()

# Use Julia's flags
target_compile_options(${PROJECT_NAME} PRIVATE ${JULIA_CFLAGS})
target_link_options(${PROJECT_NAME} PRIVATE ${JULIA_LDFLAGS} ${JULIA_LDLIBS})

# Enable C++23
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)

##################
# Copy resources #
##################

if (1)
    foreach(dir scripts)
        add_custom_command(
                TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E remove_directory $<TARGET_FILE_DIR:${PROJECT_NAME}>/${dir}
                COMMAND ${CMAKE_COMMAND} -E create_symlink
                ${CMAKE_CURRENT_SOURCE_DIR}/${dir}
                $<TARGET_FILE_DIR:${PROJECT_NAME}>/${dir}
                COMMENT "Symlinking ./${dir} -> build/Debug/${dir}"
        )
    endforeach()
else()
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/scripts DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
endif()
